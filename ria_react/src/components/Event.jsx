import React from "react";

/* 자바스크립트의 이벤트 */

// ! 이벤트
/* 웹페이지에서 발생하는 대부분의 일(사건)
사용자가 버튼을 클릭, 웹페이지가 로드, 인풋 필드에 입력 등 */

// ! 이벤트 핸들링
/* 특정 이벤트에 반응하여 특정 동작을 실행하는 것을 의미
이벤트 핸들러(또는 이벤트 리스터)는 특정 이벤트가 발생했을 때 호출되는 함수 */

// ! 이벤트 핸들러 등록 방법
// ? 1. HTML 이벤트 핸들러 속성
/* HTML요소에 직접 on키워드 (onClick, onLoad, onChange ...)를 사용해서 속성에 함수를 할당해서 이벤트를 연결 */

// ? 2. DOM 프로퍼티에 할당
/* 자바스크립트에서 HTML 요소의 이벤트 핸들러 프로퍼티에 함수를 할당하는 방법 */

// ? 3. addEventListener 메서드
// * 표준이벤트 모델, 한 요소에 여러 개의 이벤트 핸들러 등록 가능
/* HTML 요소의 addEventListener메서드를 사용하여 이벤트 핸들러 등록 
DOM 요소에 이벤트 리스터를 추가하는데 사용 
첫번째 매개변수로 이벤트 유형(click, load, input) 두번째 매개변수로 이벤트 핸들러 함수를 받는다. */

// ! 이벤트 객체
/* 이벤트 핸들러가 호출될 때, 브라우저가 자동으로 이벤트 객체를 생성하여 이벤트 핸들러에 전달
마우스의 이벤트의 경우 마우스 위치정보
키보드 이벤트의 경우 어떤 키가 눌려졌는지에 대한 정보 */

// ! 이벤트 전파
/* 이벤트는 일반적으로 특정 요소에서 발생 
해당 이벤트는 해당 요소의 부모 요소들로 전파
event.stopPropagation() 메서드를 호출하면 이벤트 전파를 중단 가능*/

/*
! ㅎㅎㅎ
const btn = document.querySelector(".이벤트");
btn.addEventListener("click", function () {
  alert("버튼이 클릭되었습니다.");
});
*/

// ! 이벤트 버블링
/* 특정 요소에서 이벤트가 발생했을때, 그 이벤트가 상위요소들로 전달되는 현상 */
// ! 이벤트 캡처링
/* 이벤트 버블링과 반대 방향으로 이벤트가 전달되는 현상 */
/* 최상위요소에서 시작 -> 이벤트가 발생한 요소까지 이벤트를 전달 (외부->내부) */


/*
! 키보드 이벤트
keydown : 키를 누를 때 발생 
keyup : 키를 떼면 발생
keypress: 키를 누르는 동안 발생

addEventListener 메서드를 사용하여 키보드 이벤트 핸들러 등록

! 마우스 이벤트
click : 마우스 버튼을 클릭할 때 발생
dbclick : 마우스 버튼을 빠르게 두번 클릭할때 발생
mousemove : 마우스 버튼을 움직일 때 발생
mousedown : 마우스 버튼을 누를때 발생
mouseup :  마우스를 버튼을 떼면 발생

addEventListener 메서드를 사용하여 키보드 이벤트 핸들러 등록

! 폼 이벤트
submit : 폼이 제출 될 때 발생
reset : 폼이 초기화 될 때 발생
change : 사용자가 폼의 값을 변경하고, 해당 요소에서 포커스를 빼면 발생
input : 사용자가 폼의 값을 변경할 때 발생, change 이벤트와는 달리 포커스 중일 때 발생
focus : 요소에 포커스가 될 때 발생
blur : 요소에서 포커스가 빠질 때 발생
*/


const Event = () => {

  return (
    <div>
      <span className="이벤트">Event</span>
    </div>
  );
};

export default Event;
